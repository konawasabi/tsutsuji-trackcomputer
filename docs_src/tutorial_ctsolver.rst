==================
CurveTrack Solver
==================

はじめに
========

このセクションでは、Measureウィンドウの機能の一つである :ref:`CurveTrack Solver <ref_measure_ctsolver>` について、いくつかの使用シーンごとに使用手順を紹介します。


航空写真から曲線半径・曲線長を求める
==================================

:doc:`背景画像 <tutorial_backimg>` として表示した航空写真や地図上に記された曲線軌道から曲線半径・曲線長を計算します。
基本的な使い方は次の通りです。

1. カーソルAのPos., Dir.を曲線軌道の始点に合わせる
2. カーソルBのPos., Dir.を曲線軌道の終点に合わせる
3. Mode を次のどちらかに設定してDo Itをクリックする

   1. α(fix)->β(free), R(free)
   2. α(free)->β(fix), R(free)

.. image:: ./files/tutorial/ctsolver_fitradius.png
	   :scale: 50%

これで、カーソルA, B間を結ぶ最適な曲線軌道の曲線半径・曲線長が計算されます。
計算結果はプロットウィンドウに図示され、同時に、計算に用いた各種パラメータと、Curve構文で表した計算結果がターミナルに表示されます。
以下、プロットウィンドウの表示例とターミナルへの出力例を示します。

.. image:: ./files/tutorial/ctsolver_mode1.png
	   :scale: 40%

.. code-block:: text

    [Curve fitting]
    Inputs:
    Fitmode:          1. α(fix)->β(free), R(free)
    Cursor α,β:       A,B
    Ponint α:         (45.009866, -8.697464)
    Ponint β:         (127.091985, -4.112291)
    Direction α:     6.968257
    Direction β:     -0.082262
    Transition func.: line
    TCL α:            0.000000
    TCL β:            0.000000
    Results:
    R:   -621.953334
    CCL: 76.534326
    endpt:            (121.357858, -4.104058)
    shift from pt. β: -5.734133

    $pt_a;
    Curve.SetFunction(1);
    Curve.Interpolate(0.000000,0.000000);
    $pt_a +0.000000;
    Curve.Interpolate(-621.953334,0.000000);
    $pt_a +76.534326;
    Curve.Interpolate(-621.953334,0.000000);
    $pt_a +76.534326;
    Curve.Interpolate(0.000000,0.000000);

.. note::

   曲線の始点・終点へカーソルを合わせることが難しい場合は、プロットウィンドウのY Mag.を変更するとある程度合わせやすくなります。
   上記の例では、Y Mag. = 7として、注目している軌道と直交する座標を拡大して、軌道の曲率を見かけ上大きくしています。
   
   なお、この方法は、軌道の方向がx軸と平行でない場合はあまり効果がないので注意してください。

   
計算Modeについて
--------------------

前節では計算Modeとして1. α(fix)->β(free), R(free), 2. α(free)->β(fix), R(free)の2つを挙げました。
1.はカーソルAを始点としてカーソルBの延長線上に終点をもつ曲線を求めるモード、2.はカーソルBを終点としてカーソルAの延長線上に始点をもつ曲線を求めるモード(1.の逆)です。

Mode 1,2の概略図を次に示します。

.. image:: ./files/tutorial/ctsolver_mode1-2.png
	   :scale: 60%

原理的には、カーソルA,Bが曲線軌道の端点に一致していれば、Mode1,2の計算結果は一致します。
しかし実際には、2つのカーソルを曲線軌道の端点に正確に合わせることは難しく、上図で示したように2つの計算結果が一致しない可能性は高くなります。
（ここでは、カーソルBが曲線軌道の終点から左側にずれている場合を示しています）

Mode1,2は、合わせやすい側のカーソルを端点に正確に配置し、反対側のカーソルは端点の延長線上にアバウトに配置して、状況に合ったModeを選んで計算する、という使い方を想定しています。
		   
..
   原理的には、カーソルA,Bが曲線軌道の端点に一致していれば、Mode1,2の計算結果は一致します。
   しかし実際には、2つのカーソルを曲線軌道の端点に正確に合わせることは難しく、結果として目的の曲線軌道に一致しない計算結果が得られる可能性は高くなります。

   上図では、カーソルBが曲線軌道の終点から左側にずれている場合を示しています。

   これを逆手にとって、合わせやすい側のカーソルを端点に正確に配置し、反対側のカーソルは端点の延長線上にアバウトに配置して、Mode 1,2から状況に合ったものを選んで計算する、という使い方を想定しています。
		   
なお、Mode3-5の詳細については :ref:`こちら<ref_measure_ctsolver_mode>` を参照してください。

緩和曲線の扱い
--------------

デフォルトでは、上記の手順で計算される軌道は単純な円軌道で、始点・終点に緩和曲線は付いていません。

緩和曲線のついた曲線軌道を求める場合は、TCL α, TCL βフィールドにそれぞれの側の緩和曲線長さを入力し、逓減関数をline/sinから選んでDo Itを実行します。

なお、Version 1.2.0では、緩和曲線長さを自動で求める機能は未実装です。
(1) 一旦単純な円軌道として計算して、得られた曲線半径と該当区間の運転速度から緩和曲線長を推定する、(2) 実地・文献調査で得た値を使う、(3) 適当な値を入力して計算を何度か行い最適値を見つける、などの方法で対応してください。


.. note::

   略語について

   * TCL: Transition curve length (緩和曲線長さ)
   * CCL: Circular curve length (円曲線長さ)




曲線軌道の始点、曲線長を求める
============================

1. カーソルAのPos., Dir.を曲線軌道の始点に合わせる
2. カーソルBのPos., Dir.を曲線軌道の終点に合わせる
3. Rフィールドに曲線半径を入力する
4. Modeを 3. α(free)->β(free), R(fix) に設定してDo Itをクリックする

他の軌道への合流
===============


渡り線
========


待避線
=======




